name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force a rebuild of the container image'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/arm-hass-addon

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to detect changes

      - name: Extract version from config.yaml
        id: version
        run: |
          # Get version from config.yaml
          CONFIG_VERSION=$(grep '^version:' arm/config.yaml | sed 's/version: *"\(.*\)"/\1/')

          # If this is a tag push, use the tag (remove 'v' prefix)
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            GIT_TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${GIT_TAG#v}"
          else
            VERSION="${CONFIG_VERSION}"
          fi

          echo "addon_version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Building version: ${VERSION}"

      - name: Detect changes and decide on rebuild
        id: changes
        run: |
          # Check for manual override
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested via workflow input, skipping change detection."
            echo "rebuild=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Files/paths that should trigger a rebuild when changed
          IMAGE_FILES=(
            ".docker/Dockerfile"
            "arm/rootfs/run.sh"
            "arm/rootfs/defaults/"
          )

          echo "::debug::Image-relevant patterns that trigger rebuild:"
          for pat in "${IMAGE_FILES[@]}"; do
            echo "::debug::  - ${pat}"
          done

          is_tag=false
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            is_tag=true
          fi

          # Helper: check a diff list for any image-relevant files
          changed_in_list() {
            local list="$1"
            local found=false
            while read -r f; do
              [[ -z "$f" ]] && continue
              for pat in "${IMAGE_FILES[@]}"; do
                # Match either exact file or directory prefix
                if [[ "$f" == "$pat" ]] || [[ "$f" == ${pat}* ]]; then
                  echo "::debug::Match found: $f (matches pattern: ${pat})"
                  found=true
                fi
              done
            done <<<"$list"
            [ "$found" = true ] && return 0
            return 1
          }

          # Determine the source tag for a potential retag operation
          SOURCE_TAG=""
          if [ "$is_tag" = true ]; then
            CURRENT_TAG="${GITHUB_REF#refs/tags/}"
            SOURCE_TAG=$(git tag --sort=-creatordate | grep -v "^${CURRENT_TAG}$" | head -n1 || true)
          else
            SOURCE_TAG=$(git tag --sort=-creatordate | head -n1 || true)
          fi
          echo "::debug::Potential source tag for retag: ${SOURCE_TAG}"
          echo "source_tag=${SOURCE_TAG}" >> "$GITHUB_OUTPUT"

          # If no source tag exists, we must rebuild
          if [ -z "$SOURCE_TAG" ]; then
            echo "No previous tag found to retag from, forcing rebuild."
            echo "rebuild=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Determine diff range
          DIFF_LIST=""
          if [ "$is_tag" = true ]; then
            BASE_REF="${SOURCE_TAG}"
            TARGET_REF="${CURRENT_TAG}"
            echo "Comparing changes between tags: ${BASE_REF} and ${TARGET_REF}"
            DIFF_LIST=$(git diff --name-only "${BASE_REF}" "${TARGET_REF}")
          else
            DEFAULT_BRANCH=master
            echo "Fetching ${DEFAULT_BRANCH} for comparison"
            git fetch origin ${DEFAULT_BRANCH} --depth=1 || true
            BASE_REF="origin/${DEFAULT_BRANCH}"
            TARGET_REF="${GITHUB_SHA}"
            echo "Comparing changes between branch: ${BASE_REF} and ${TARGET_REF}"
            DIFF_LIST=$(git diff --name-only "${BASE_REF}" "${TARGET_REF}")
          fi

          # Log all changed files in debug mode
          if [ -n "$DIFF_LIST" ]; then
            echo "::debug::Files changed in this diff:"
            while read -r file; do
              [[ -n "$file" ]] && echo "::debug::  - $file"
            done <<<"$DIFF_LIST"
          else
            echo "::debug::No files changed in diff"
          fi

          # Check if any changed files match our patterns
          echo "::debug::Checking for matches against image-relevant patterns..."
          if changed_in_list "$DIFF_LIST"; then
            echo "Image-relevant files changed, rebuild required."
            echo "rebuild=true" >> "$GITHUB_OUTPUT"
          else
            echo "No image-relevant files changed, will retag existing image."
            echo "rebuild=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        if: steps.changes.outputs.rebuild == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.addon_version }}

      - name: Build and push Docker image
        if: steps.changes.outputs.rebuild == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Retag existing image
        if: steps.changes.outputs.rebuild == 'false'
        run: |
          echo "No rebuild needed, retagging existing image"
          SOURCE_TAG="${{ steps.changes.outputs.source_tag }}"
          SOURCE_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SOURCE_TAG#v}"

          echo "Source image: ${SOURCE_IMAGE}"
          echo "New tags: ${{ steps.meta.outputs.tags }}"

          # Verify the source image exists before attempting to retag
          if ! docker buildx imagetools inspect "${SOURCE_IMAGE}" > /dev/null 2>&1; then
            echo "::error::Source image ${SOURCE_IMAGE} not found in registry. Cannot retag."
            echo "::error::This can happen if the previous tag's build failed or was deleted."
            echo "::error::To resolve, you can run this workflow again with 'Force rebuild' checked."
            exit 1
          fi

          # Create new tags by copying the manifest
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            echo "Creating tag: ${tag}"
            docker buildx imagetools create --tag "${tag}" "${SOURCE_IMAGE}"
          done

          echo "Successfully retagged image from ${SOURCE_IMAGE}"
